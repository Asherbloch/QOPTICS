function laplacian = mydel2(F, dx, dy, dz)
%MYDEL2 using vectorization method to 
%  calculate laplacian of the given funcion.  
%  Central difference is applied to interior 
%  points. For boundary points,
% 
%  -5u(i+1) + 4u(i+2) - u(i+3) + 2u(i), i = 0
%  -5u(i-1) + 4u(i-2) - u(i-3) + 2u(i), i = N
% 
%  is applied.
% 
%  laplacian = MYDEL2(F,dx,dy,dz)
%  laplacian: laplacian of F
%  F: 3D-array stored on GPU
%  dx,dy,dz : differentials for each direction
% 
% Last revised on 07/12/2020

if ~strcmp(class(F), 'gpuArray')
    disp('F must be a gpuArray')
    return
end

[Nx, Ny, Nz] = size(F);

xi = 2:(Nx-1);
yi = 2:(Ny-1);
zi = 2:(Nz-1);

laplacian = gpuArray(zeros(Ny, Nx, Nz));

% interior points

laplacian(yi,xi,zi) =  (1/dx^2)*(F(yi,xi+1,zi) - 2*F(yi,xi,zi) + F(yi,xi-1,zi)) + ...
    (1/dy^2)*(F(yi+1,xi,zi) - 2*F(yi,xi,zi) + F(yi-1,xi,zi)) + ...
    (1/dz^2)*(F(yi,xi,zi+1) - 2*F(yi,xi,zi) + F(yi,xi,zi-1));

% boundary plane points

% xy-plane along x and y
laplacian(yi,xi,[1,end]) =  (1/dx^2)*(F(yi,xi+1,[1,end]) - 2*F(yi,xi,[1,end]) + F(yi,xi-1,[1,end]))  ...
    + (1/dy^2)*(F(yi+1,xi,[1,end]) - 2*F(yi,xi,[1,end]) + F(yi-1,xi,[1,end])) ...
    + 0;


laplacian(yi,xi,[1,end]) = cat(3, ...
                                        laplacian(yi,xi,1) + (1/dz^2)*(-5*F(yi,xi,2) + 4*F(yi,xi,3) - F(yi,xi,4) + 2*F(yi,xi,1)), ...
                                        laplacian(yi,xi,end) +(1/dz^2)*(-5*F(yi,xi,end-1) + 4*F(yi,xi,end-2) - F(yi,xi,end-3) + 2*F(yi,xi,end)) ...
                                            );  % along z

% xz-plane along x and z
laplacian([1,end],xi,zi) =  (1/dx^2)*(F([1,end],xi+1,zi) - 2*F([1,end],xi,zi) + F([1,end],xi-1,zi)) ...
    +  0 ...
    + (1/dz^2)*(F([1,end],xi,zi+1) - 2*F([1,end],xi,zi) + F([1,end],xi,zi-1));

laplacian([1,end],xi,zi) = cat(1, ...
    laplacian(1,xi,zi) + (1/dy^2)*(-5*F(2,xi,zi) + 4*F(3,xi,zi) - F(4,xi,zi) + 2*F(1,xi,zi)), ...
    laplacian(end,xi,zi) + (1/dy^2)*(-5*F(end-1,xi,zi) + 4*F(end-2,xi,zi) - F(end-3,xi,zi) + 2*F(end,xi,zi)) ...
                                             ); % along y

% yz-plane along y and z
laplacian(yi,[1,end],zi) = + 0 ...  
    + (1/dy^2)*(F(yi+1,[1,end],zi) - 2*F(yi,[1,end],zi) + F(yi-1,[1,end],zi))  ...
    + (1/dz^2)*(F(yi,[1,end],zi+1) - 2*F(yi,[1,end],zi) + F(yi,[1,end],zi-1));


laplacian(yi,[1,end],zi) = cat(2, ...
    laplacian(yi,1,zi) + (1/dx^2)*(-5*F(yi,2,zi) + 4*F(yi,3,zi) - F(yi,4,zi) + 2*F(yi,1,zi)), ... 
    laplacian(yi,end,zi) + (1/dx^2)*(-5*F(yi,end-1,zi) + 4*F(yi,end-2,zi) - F(yi,end-3,zi) + 2*F(yi,end,zi)) ...
                                        );  % along x

                                    
                                    
% boundary line points(4 lines for each direction)

% x-line
bd_x_lines  =  (1/dx^2)*(F([1,end],xi+1,[1,end]) - 2*F([1,end],xi,[1,end]) + F([1,end],xi-1,[1,end]));  % four lines (two lines at z-, twos at z+)


bd_x_lines = cat(1, ...  
    bd_x_lines(1,:,:)  + (1/dy^2)*(-5*F(2,xi,[1,end]) + 4*F(3,xi,[1,end]) - F(4,xi,[1,end]) + 2*F(1,xi,[1,end])), ...    
    bd_x_lines(2,:,:) + (1/dy^2)*(-5*F(end-1,xi,[1,end]) + 4*F(end-2,xi,[1,end]) - F(end-3,xi,[1,end]) + 2*F(end,xi,[1,end])) ...
                                            );   % along y

bd_x_lines = cat(3, ...
    bd_x_lines(:,:,1) + (1/dz^2)*(-5*F([1,end],xi,2) + 4*F([1,end],xi,3) - F([1,end],xi,4) + 2*F([1,end],xi,1)), ... 
    bd_x_lines(:,:,2) + (1/dz^2)*(-5*F([1,end],xi,end-1) + 4*F([1,end],xi,end-2) - F([1,end],xi,end-3) + 2*F([1,end],xi,end)) ...
                                             );    % along z

% y-line
bd_y_lines =  (1/dy^2)*(F(yi+1,[1,end],[1,end]) - 2*F(yi,[1,end],[1,end]) + F(yi-1,[1,end],[1,end]));

bd_y_lines = cat(2, ...
    bd_y_lines(:,1,:) + (1/dx^2)*(-5*F(yi,2,[1,end]) + 4*F(yi,3,[1,end]) - F(yi,4,[1,end]) + 2*F(yi,1,[1,end])), ... 
    bd_y_lines(:,2,:) + (1/dx^2)*(-5*F(yi,end-1,[1,end]) + 4*F(yi,end-2,[1,end]) - F(yi,end-3,[1,end]) + 2*F(yi,end,[1,end])) ...
                                    ); % along x
bd_y_lines = cat(3, ...
    bd_y_lines(:,:,1) + (1/dz^2)*(-5*F(yi,[1,end],2) + 4*F(yi,[1,end],3) - F(yi,[1,end],4) + 2*F(yi,[1,end],1)), ...   
    bd_y_lines(:,:,2)  + (1/dz^2)*( -5*F( yi, [1,end], end-1 ) + 4*F( yi, [1,end], end-2) - F( yi,[1,end],end-3) + 2*F(yi,[1,end],end))  ...  
                                            );  % along z       !! 07/12/2020 typo here  F(yi,[1,end],1) --> F(yi,[1,end],end)

% z-line
bd_z_lines =  (1/dz^2)*(F([1,end],[1,end],zi+1) - 2*F([1,end],[1,end],zi) + F([1,end],[1,end],zi-1));

bd_z_lines = cat(1, ...
    bd_z_lines(1,:,:) + (1/dy^2)*(-5*F(2,[1,end],zi) + 4*F(3,[1,end],zi) - F(4,[1,end],zi) + 2*F(1,[1,end],zi)), ...  
    bd_z_lines(2,:,:) + (1/dy^2)*(-5*F(end-1,[1,end],zi) + 4*F(end-2,[1,end],zi) - F(end-3,[1,end],zi) + 2*F(end,[1,end],zi)) ...
                                            );  % along y
bd_z_lines = cat(2, ...
    bd_z_lines(:,1,:) + (1/dx^2)*(-5*F([1,end],2,zi) + 4*F([1,end],3,zi) - F([1,end],4,zi) + 2*F([1,end],1,zi)), ...  
    bd_z_lines(:,2,:) + (1/dx^2)*(-5*F([1,end],end-1,zi) + 4*F([1,end],end-2,zi) - F([1,end],end-3,zi) + 2*F([1,end],end,zi)) ...
                                            ); % along x

laplacian([1,end],xi,[1,end]) = bd_x_lines;
laplacian(yi,[1,end],[1,end]) = bd_y_lines;
laplacian([1,end],[1,end],zi) = bd_z_lines;

% boundary points(for each of 4 corners of head and tail slices, so 2*2*2 corners)

leftdown = (1/dx^2)*(-5*F(1,2,[1,end]) + 4*F(1,3,[1,end]) - F(1,4,[1,end]) + 2*F(1,1,[1,end])) ...
    + (1/dy^2)*(-5*F(2,1,[1,end]) + 4*F(3,1,[1,end]) - F(4,1,[1,end]) + 2*F(1,1,[1,end]));
leftup = (1/dx^2)*(-5*F(1,2,[1,end]) + 4*F(1,3,[1,end]) - F(1,4,[1,end]) + 2*F(1,1,[1,end])) ...
    + (1/dy^2)*(-5*F(end-1,1,[1,end]) + 4*F(end-2,1,[1,end]) - F(end-3,1,[1,end]) + 2*F(end,1,[1,end]));
rightup = (1/dx^2)*(-5*F(1,end-1,[1,end]) + 4*F(1,end-2,[1,end]) - F(1,end-3,[1,end]) + 2*F(1,end,[1,end])) ...
    + (1/dy^2)*(-5*F(end-1,1,[1,end]) + 4*F(end-2,1,[1,end]) - F(end-3,1,[1,end]) + 2*F(end,1,[1,end]));
rightdown = (1/dx^2)*(-5*F(1,end-1,[1,end]) + 4*F(1,end-2,[1,end]) - F(1,end-3,[1,end]) + 2*F(1,end,[1,end])) ...
    + (1/dy^2)*(-5*F(2,1,[1,end]) + 4*F(3,1,[1,end]) - F(4,1,[1,end]) + 2*F(1,1,[1,end]));

bd_point = [leftdown, rightdown; leftup, rightup];
bd_point(:,:,[1,end]) = cat(3, ...
    bd_point(:,:,1) + (1/dz^2)*(-5*F([1,end],[1,end],2) + 4*F([1,end],[1,end],3) - F([1,end],[1,end],4) + 2*F([1,end],[1,end],1)), ...
    bd_point(:,:,end) + (1/dz^2)*(-5*F([1,end],[1,end],end-1) + 4*F([1,end],[1,end],end-2) - F([1,end],[1,end],end-3) + 2*F([1,end],[1,end],end)) ...
                                        ); % along z

laplacian([1,end], [1,end], [1,end]) = bd_point;

end